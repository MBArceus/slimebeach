<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>pt_mado_u</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize movement variables.

hsp = 0;
vsp = 0;
movespeed = 4;
use = false;
face = 1;

//Initialize game variables.

hp = 100;
mp = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Layering code

if(instance_exists(obj_16))
{
i = instance_nearest(x, y, obj_16)

if(y &gt; i.y) depth = -1 else depth = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement, bounds collision, etc.
if (global.pause == 1) exit;
//Set movement variables
moveLeft = -(keyboard_check(ord("A")) or keyboard_check(vk_left));
moveRight = (keyboard_check(ord("D")) or keyboard_check(vk_right));
moveUp = -(keyboard_check(ord("W")) or keyboard_check(vk_up));
moveDown = (keyboard_check(ord("S")) or keyboard_check(vk_down));

//Set speeds based on movement variables
hsp = (moveLeft + moveRight) * movespeed;
vsp = (moveUp + moveDown) * movespeed;


//Set facing variables
if(keyboard_check(ord("W")) or keyboard_check(vk_up)){
    sprite_index = pt_mado_u;
    image_speed = 1/4;
} else 
if(keyboard_check(ord("S")) or keyboard_check(vk_down)){
    sprite_index = pt_mado_d;
    image_speed = 1/4;
} else 
if(keyboard_check(ord("A")) or keyboard_check(vk_left)){
    sprite_index = pt_mado_l;
    image_speed = 1/4;
} else 
if(keyboard_check(ord("D")) or keyboard_check(vk_right)){
    sprite_index = pt_mado_r;
    image_speed = 1/4;
} else 
{
image_speed = 0;
image_index = 0;
}

//Collision code + setting x and y
if(place_meeting(x+hsp,y,obj_collidable))
{
            if(place_meeting(x,y+movespeed,obj_collidable) and not place_meeting(x,y-movespeed,obj_collidable))
     {
         y -= movespeed;
         x += movespeed * sign(hsp);
     }
     else if(place_meeting(x,y-movespeed,obj_collidable) and not place_meeting(x,y+movespeed,obj_collidable))
     {
         y += movespeed;
         x += movespeed * sign(hsp);
     }
     else
      {

         while(!place_meeting(x+sign(hsp),y,obj_collidable))
         {
             x += sign(hsp);
         }
      }
      hsp = 0;
   
  }


if(place_meeting(x,y+vsp,obj_collidable))
{
     if(place_meeting(x+movespeed,y,obj_collidable) and not place_meeting(x-movespeed,y,obj_collidable))
     {
         x -= movespeed + 1;
         y += movespeed * sign(vsp);
     }
     else if(place_meeting(x-movespeed,y,obj_collidable) and not place_meeting(x+movespeed,y,obj_collidable))
     {
         x += movespeed + 1;
         y += movespeed * sign(vsp);
     }
     else
      {

         while(!place_meeting(x,y+sign(vsp),obj_collidable))
         {
             y += sign(vsp);
         }
      }
      vsp = 0;
}
x += hsp;

y += vsp;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collidable">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = 0;
vsp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
